plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlinx-serialization'
    id 'dagger.hilt.android.plugin'
    alias(libs.plugins.com.google.devtools.ksp)
    alias(libs.plugins.com.google.protobuf)
    alias(libs.plugins.org.jetbrains.kotlin.plugin.compose)
}

android {
    defaultConfig {
        applicationId "us.mitene.practicalexam"
        compileSdk libs.versions.app.compileSdk.get().toInteger()
        minSdkVersion libs.versions.app.minSdk.get().toInteger()
        targetSdkVersion libs.versions.app.targetSdk.get().toInteger()
        versionCode libs.versions.app.versionCode.get().toInteger()
        versionName libs.versions.app.versionName.get()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildFeatures {
        dataBinding true
        compose true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    composeOptions {
        kotlinCompilerExtensionVersion = libs.versions.app.kotlinCompilerExtensionVersion.get()
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
    kapt {
        correctErrorTypes = true
    }
    namespace 'us.mitene.practicalexam'
}

dependencies {

    implementation libs.androidx.core.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.com.google.android.material
    implementation libs.androidx.constraintlayout
    testImplementation libs.junit
    androidTestImplementation libs.androidx.test.ext.junit
    androidTestImplementation libs.androidx.test.espresso.espresso.core

    // jetpack compose bom
    implementation platform(libs.androidx.compose.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.material
    implementation libs.androidx.material.icons.extended
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
    implementation libs.androidx.runtime.livedata
    // jetpack compose
    implementation libs.androidx.activity.activity.compose
    implementation libs.androidx.lifecycle.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.lifecycle.viewmodel.compose

    // for test
    testImplementation libs.org.robolectric
    testImplementation libs.androidx.test.core
    testImplementation libs.androidx.test.core.ktx
    testImplementation libs.androidx.test.ext.junit
    testImplementation libs.androidx.test.ext.junit.ktx
    testImplementation(libs.androidx.arch.core.core.testing)
    testImplementation libs.io.mockk
    testImplementation libs.org.mockito.mockito.core

    // jet pack
    implementation libs.androidx.fragment.fragment.ktx
    implementation libs.androidx.recyclerview

    // androidx.lifecycle
    implementation libs.androidx.lifecycle.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.lifecycle.livedata.ktx
    //noinspection LifecycleAnnotationProcessorWithJava8
    kapt libs.androidx.lifecycle.lifecycle.compiler
    implementation libs.androidx.lifecycle.lifecycle.process

    // room
    implementation(libs.androidx.room.room.runtime)
    ksp libs.androidx.room.room.compiler
    implementation(libs.androidx.room.room.ktx)
    implementation(libs.androidx.room.room.rxjava2)
    implementation(libs.androidx.room.room.rxjava3)
    testImplementation(libs.androidx.room.room.testing)

    // okhttp
    implementation libs.com.squareup.okhttp3.okhttp
    implementation libs.com.squareup.okhttp3.logging.interceptor
    testImplementation libs.com.squareup.okhttp3.mockwebserver

    // glide
    implementation libs.com.github.bumptech.glide
    implementation libs.com.github.bumptech.glide
    implementation libs.com.github.bumptech.glide.annotations
    ksp libs.com.github.bumptech.glide.compiler

    // coroutine
    implementation libs.org.jetbrains.kotlinx.kotlinx.coroutines.core
    implementation libs.org.jetbrains.kotlinx.kotlinx.coroutines.android
    implementation libs.org.jetbrains.kotlinx.kotlinx.coroutines.rx2
    testImplementation libs.org.jetbrains.kotlinx.kotlinx.coroutines.test

    // rxjava
    implementation libs.io.reactivex.rxjava2.rxjava
    implementation libs.io.reactivex.rxjava2.rxandroid
    implementation libs.io.reactivex.rxjava2.rxkotlin

    // retrofit
    implementation libs.com.squareup.retrofit2.retrofit
    implementation libs.com.squareup.retrofit2.adapter.rxjava2
    implementation libs.com.squareup.retrofit2.converter.gson
    implementation libs.com.squareup.retrofit2.converter.moshi
    implementation libs.com.jakewharton.retrofit.retrofit2.kotlinx.serialization.converter

    // gson
    implementation libs.com.google.code.gson

    // moshi
    implementation libs.com.squareup.moshi.moshi.kotlin

    // serialization
    implementation libs.org.jetbrains.kotlinx.kotlinx.serialization.json

    // timber
    implementation libs.com.jakewharton.timber

    // DI : dagger
    implementation libs.com.google.dagger
    kapt libs.com.google.dagger.dagger.compiler

    // DI : hilt
    implementation libs.com.google.dagger.hilt.android
    kapt libs.com.google.dagger.hilt.compiler
    testImplementation libs.com.google.dagger.hilt.android.testing
    kaptTest libs.com.google.dagger.hilt.compiler
    implementation libs.androidx.hilt.hilt.navigation.compose

    // Proto DataStore
    implementation  libs.androidx.datastore
    implementation  libs.com.google.protobuf.protobuf.javalite
}

protobuf {
    protoc {
        artifact = libs.com.google.protobuf.protoc.get()
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}